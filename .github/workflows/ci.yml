name: continuous integration

on:
  pull_request:
    branches: [ main ]
    paths:
      - .github/workflows/ci.yml
      - package*.json
      - '**.js'
      - '**.ts'
  push:
    branches: [ main ]
    paths:
      - .github/workflows/ci.yml
      - package*.json
      - '**.js'
      - '**.ts'
    tags: [ '!*' ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v3
        with: { node-version: 16, cache: npm }

      - uses: actions/cache@v3
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
        id: cache
      - run: npm ci --ignore-scripts --include=dev
        if: steps.cache.outputs.cache-hit != 'true'
        env: { FONTAWESOME_NPM_AUTH_TOKEN: '${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}' }
      - run: npm run build

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.actor != 'kamilsk'
    needs: [ build ]

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v3
        with: { node-version: 16, cache: npm }

      - run: npm install --global vercel@latest

      - run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ deploy ]

    steps:
      - uses: rtCamp/action-slack-notify@v2
        if: github.event_name == 'push'
        env:
          SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          SLACK_ICON: https://github.com/github.png?size=64
          SLACK_TITLE: '♻️ ${{ github.repository }}: ${{ github.workflow }}'
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
