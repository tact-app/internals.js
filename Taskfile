#!/usr/bin/env bash

[ "${BASH_VERSINFO:-0}" -ge 4 ] || {
  echo "bash version 4 or higher is required" >&2
  exit 1
}

set -euo pipefail

refresh() {
  git fetch --all --prune # TODO:bug `--tags --prune-tags` replaces tags from forks

  local deps tools
  deps=$(md5sum package-lock.json | awk '{print $1}')
  tools=$(md5sum tools/package-lock.json | awk '{print $1}')

  local remote actual target shared
  remote=${1:-'@{u}'}
  actual=$(git rev-parse @)
  target=$(git rev-parse "${remote}")
  shared="$(git merge-base @ "${remote}")"
  if [ "${actual}" != "${shared}" ]; then
    if ! git diff-index --quiet HEAD; then
      git stash -m 'stash before pull'
      trap 'git stash pop' EXIT
    fi
    git pull --force --rebase
  fi

  if [ "${deps}" != "$(md5sum package-lock.json | awk '{print $1}')" ]; then
    install --from-scratch
  fi

  if [ "${tools}" != "$(md5sum tools/package-lock.json | awk '{print $1}')" ]; then
    tools npm ci
  fi
}

# TODO: make it stateless but support starting point
# TODO: support beta-versions
# TODO: avoid git references, e.g., github
@update() {
  local packages=("${@}")
  if [ ${#packages[@]} = 0 ]; then

    local filter='.dependencies | keys | join(" ")'
    IFS=' ' read -r -a packages <<<"$(npm ls --depth=0 --omit=dev --json | jq -r "${filter}")"
  fi

  for pkg in "${packages[@]}"; do
    echo npm install "${pkg}"@latest
    npm install "${pkg}"@latest >/dev/null
    if ! git diff --exit-code >/dev/null; then
      printf '\nPackage %s was updated, please commit changes\n' "${pkg}"
      return
    fi
  done
  echo is up-to-date
}

setup() {
  set_fontawesome_token false
  set_sentry_token false
  set_vercel_token false
  @env

  tools npm ci
  vercel link

  build --from-scratch

  local copied=false
  command -v pbcopy >/dev/null && echo source bin/activate | pbcopy && copied=true
  echo Run the next commands to complete setup:
  printf '├─ source bin/activate\t- to activate virtual environment (copied to clipboard: %s)\n' $copied
  printf '└─ run whoami \t\t- to show meta information about your environment\n'
}

set_fontawesome_token() { @store_token 'Font Awesome' fontawesome.token 36 "${1:-true}"; }
set_sentry_token() { @store_token Sentry sentry.token 64 "${1:-true}"; }
set_vercel_token() { @store_token Vercel vercel.token 24 "${1:-true}"; }
@store_token() {
  local name="${1}" key="${2}" length="${3}" update="${4:-true}"

  local token
  echo Please enter "${name}" token:
  read -rs token
  token=${token## }
  token=${token%% }

  if [ "${#token}" -lt "${length}" ]; then
    echo 'Token is invalid.'
    return 1
  fi
  git config "${key}" "${token}"
  echo 'Token saved.'

  [ "${update}" != false ] && @env || return 0
}

@env() {
  cat <<EOF >.env
FONTAWESOME_TOKEN=$(git config fontawesome.token)
SENTRY_TOKEN=$(git config sentry.token)
VERCEL_TOKEN=$(git config vercel.token)
EOF
  cat <<EOF >.sentryclirc
[auth]
token=$(git config sentry.token)
EOF
}

@vne() {
  source .env
  git config fontawesome.token ${FONTAWESOME_TOKEN}
  git config sentry.token ${SENTRY_TOKEN}
  git config vercel.token ${VERCEL_TOKEN}
}

@node() {
  docker run --rm -it \
    --env-file .env \
    -v "$(pwd)":/app \
    -w /app \
    "${@:2}" \
    --entrypoint=/bin/sh \
    node:16-alpine -c "${1}"
}

# Example: run isolated
#   - alias run=./Taskfile
#   - source bin/activate
#  Deploy to staging
#   - run deploy
#  Deploy to production
#   - run deploy prod
isolated() {
  docker run --rm -it \
    --env-file .env \
    -v "$(pwd)":/app \
    -w /app \
    --entrypoint=/bin/bash \
    node:16
}

# Example: run install --from-scratch
install() {
  [ "${1:-}" == '--from-scratch' ] && rm -rf node_modules
  local cmd='npm install'
  if [ -t package-lock.json ]; then
    cmd='npm ci'
  fi
  @node "${cmd} --ignore-scripts --include=dev"
}

dev() { @node 'npm run dev' -p 3000:3000; }

# Example: run build --from-scratch
# Example: run build docker --from-scratch
build() {
  # docker way
  if [ "${1:-}" == 'docker' ]; then
    if [ "${2:-}" == '--from-scratch' ]; then
      docker rmi tact-app/web:local || true
    fi
    docker build \
      --build-arg token="$(git config fontawesome.token)" \
      -f Dockerfile \
      -t tact-app/web:local .
    return
  fi

  # local way
  [ "${1:-}" == '--from-scratch' ] && rm -rf .next && install "${@}"
  @node 'npm run build'
}

# Example: run start --from-scratch
# Example: run start docker --from-scratch
start() {
  # docker way
  if [ "${1:-}" == 'docker' ]; then
    [ "${2:-}" == '--from-scratch' ] && build docker "${@:2}"
    docker run \
      --rm -it \
      -p 127.0.0.1:3000:3000 \
      tact-app/web:local
    return
  fi

  # local way
  [ "${1:-}" == '--from-scratch' ] && build "${@}"
  @node 'npm run start' -p 127.0.0.1:3000:3000
}

# Example: run tools npm i vercel@latest
# Example: run tools npm ci
tools() {
  # dirty hack related to "docker: open .env: no such file or directory"
  unset -f npm

  (cd tools && "${@}")
}

npm() { @node "npm ${*}"; }

_sentry=$(which sentry-cli || true)
sentry() {
  [ -z "${_sentry}" ] && echo Please setup env and activate it. && return 1

  local args=("${@}")
  _ "${_sentry}" --auth-token="$(git config sentry.token)" "${args[@]}"
}

_vercel=$(which vercel || true)
vercel() {
  [ -z "${_vercel}" ] && echo Please setup env and activate it. && return 1

  local args=("${@}")
  if [ "${1:-}" == 'clean' ]; then
    args=(rm --yes)
    if [ "${2:-}" == 'all' ]; then
      local deployment found=false
      while IFS='' read -r deployment; do
        args+=("${deployment}")
        found=true
      done < <(vercel ls 2>&1 | grep https | awk '{print $2}')
      if ! $found; then
        echo No deployments found.
        return
      fi
    else
      args+=(--safe tact)
    fi
  fi

  _ "${_vercel}" -t "$(git config vercel.token)" "${args[@]}"
}

# Example: run deploy prod
deploy() {
  if [ "${1:-}" == 'prod' ]; then
    vercel pull --yes --environment=production
    vercel build --yes --prod
    vercel deploy --yes --prebuilt --prod
    return
  fi

  vercel pull --yes --environment=preview
  vercel build --yes
  vercel deploy --yes --prebuilt
}

whoami() {
  echo "You are $(git config user.name) <$(git config user.email)>"
  echo "* Docker ------------------------------------------"
  docker version
  echo "* Sentry ------------------------------------------"
  sentry --version
  echo "* Vercel ------------------------------------------"
  vercel whoami
}

declare -A config
config['dryrun']=false
config['port']=3000 # TODO:debt customize it

_() {
  if ${config['dryrun']}; then
    echo "${@}"
    return
  fi
  trap 'echo "${@}"' ERR
  "${@}"
}
@debug() { echo "${@}"; }
@trace() { @debug "${@}" && "${@}"; }
@error() { echo "${@}" >&2; }
@fatal() { @error "${@}" && exit 1; }
@usage() {
  cat - <<EOF
Usage: $0 <task> <args>
Tasks:
EOF
  compgen -A function | grep -Ev '^(@|_)' | sort | cat -n
}

function @main() {
  if [[ "${1:-}" =~ ^--dry-run|-d$ ]]; then
    config['dryrun']=true
    shift
  fi
  "${@:-@usage}"
}

@main "${@}"
