#!/usr/bin/env bash

set -euo pipefail

setup() {
  __fontawesome_token
  __vercel_token

  tools npm ci

  local copied=false
  command -v pbcopy >/dev/null && echo source bin/activate | pbcopy && copied=true
  echo Run the next commands to complete setup:
  printf '├─ source bin/activate\t- to activate virtual environment (copied to clipboard: %s)\n' $copied
  printf '└─ run vercel link \t- to link the current directory to a Vercel project\n'
}

__fontawesome_token() {
  local token
  echo Please enter Font Awesome token:
  read -rs token
  token=${token## }
  token=${token%% }

  if [ "${#token}" -lt 36 ]; then
    echo 'Token is invalid.'
    return 1
  else
    git config fontawesome.token "${token}"
    echo 'Token saved.'
  fi
}

__vercel_token() {
  local token
  echo Please enter Vercel token:
  read -rs token
  token=${token## }
  token=${token%% }

  if [ "${#token}" -lt 24 ]; then
    echo 'Token is invalid.'
    return 1
  else
    git config vercel.token "${token}"
    echo 'Token saved.'
  fi
}

env() {
  # TODO:improve support custom host with https
  #    sudo code /etc/hosts <- 127.0.0.1  tact.dev tact.local
  #    sudo killall -HUP mDNSResponder; echo DNS Cache Reset
  #  https://web.dev/how-to-use-local-https/
  #  https://github.com/FiloSottile/mkcert
  return 1
}

# Example: run node npm ci --include=dev
node() {
  docker run --rm -it \
    --entrypoint=/bin/sh \
    -e FONTAWESOME_NPM_AUTH_TOKEN="$(git config fontawesome.token)" \
    -v "$(pwd)":/app \
    -w /app \
    "${@:2}" \
    node:16-alpine -c "${1}"
}

install() {
  [ "${1:-}" == '--from-scratch' ] && rm -rf node_modules
  local cmd='npm install --include=dev'
  if [ -t package-lock.json ]; then
    cmd='npm ci --include=dev'
  fi
  node "${cmd}"
}

build() {
  [ "${1:-}" == '--from-scratch' ] && rm -rf .next && install "${@}"
  node 'npm run build'
}

server() {
  [ "${1:-}" == '--from-scratch' ] && build "${@}"
  node 'npm run start' -p 127.0.0.1:3000:3000
}

# Example: run tools npm i vercel@latest
tools() {
  case "${1}" in
  npm)
    docker run --rm -it \
      -v "$(pwd)/tools":/tools \
      -w /tools \
      --entrypoint=/bin/sh \
      node:16-alpine -c "${*}"
    ;;
  esac
}

_vercel=$(which vercel || true)
vercel() {
  [ -z "${_vercel}" ] && echo Please setup env and activate it. && return 1

  local args=("${@}")
  if [ "${1:-}" == 'clean' ]; then
    args=(rm --yes)
    if [ "${2:-}" == 'all' ]; then
      local deployment
      while IFS='' read -r deployment; do
        args+=("${deployment}")
      done < <($_vercel -t "$(git config vercel.token)" ls 2>&1 | grep https | awk '{print $2}')
    else
      args+=(--safe tact)
    fi
  fi

  $_vercel -t "$(git config vercel.token)" "${args[@]}"
}

help() {
  echo "$0 <task> <args>"
  echo "Tasks:"
  compgen -A function | grep -v '^__' | sort | cat -n
}

__default() { help; }

"${@:-__default}"
